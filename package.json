{
	"name": "youtube-remote",
	"private": false,
	"version": "0.0.1",
	"description": "Youtube remote control",
	"author": "cdrsh",
	"keywords": [],
	"main": "app.js",
	"repository": {
		"type": "git",
		"url": "https://github.com/cdrsh/youtube-remote.git"
	},
	"license": "MIT",
	"engines": {
		"node": ">=10.5"
	},
	"dependencies": {
		"@babel/core": "^7.0.0-beta.51",
		"@babel/plugin-transform-runtime": "^7.0.0-beta.51",
		"@babel/polyfill": "^7.0.0-beta.51",
		"@babel/preset-env": "^7.0.0-beta.51",
		"@babel/preset-es2015": "^7.0.0-beta.51",
		"@babel/preset-stage-2": "^7.0.0-beta.51",
		"@babel/register": "^7.0.0-beta.51",
		"@babel/runtime": "^7.0.0-beta.51",
		"@sailshq/connect-redis": "^3.2.1",
		"@sailshq/lodash": "^3.10.3",
		"@sailshq/socket.io-redis": "^5.2.0",
		"async": "^2.6.1",
		"autoprefixer": "^8.6.4",
		"babel-loader": "^7.1.4",
		"babel-preset-vue": "^2.0.2",
		"bulma": "^0.7.1",
		"connect-history-api-fallback": "^1.5.0",
		"css-loader": "^0.28.11",
		"csso-loader": "^0.3.1",
		"file-loader": "^1.1.11",
		"font-awesome": "^4.7.0",
		"html-loader": "^0.5.5",
		"html-webpack-plugin": "^3.2.0",
		"http-proxy-middleware": "^0.18.0",
		"jsdom": "^11.11.0",
		"json-loader": "^0.5.7",
		"less": "^3.0.4",
		"less-loader": "^4.1.0",
		"moment-timezone": "^0.5.21",
		"node-sass": "^4.9.0",
		"postcss": "^6.0.23",
		"postcss-css-variables": "^0.9.0",
		"postcss-cssnext": "^3.1.0",
		"postcss-csso": "^3.0.0",
		"postcss-discard-comments": "^2.0.4",
		"postcss-import": "^11.1.0",
		"postcss-loader": "^2.1.5",
		"postcss-safe-parser": "^3.0.1",
		"prettier": "^1.13.7",
		"pug-html-loader": "^1.1.5",
		"raw-loader": "^0.5.1",
		"request": "^2.87.0",
		"resolve-url-loader": "^2.3.0",
		"sails": "^1.0.2",
		"sails-hook-apianalytics": "^2.0.3",
		"sails-hook-organics": "^0.14.5",
		"sails-hook-orm": "^2.0.1",
		"sails-hook-sockets": "^1.5.3",
		"sails-mysql": "^1.0.0",
		"sass-loader": "^7.0.3",
		"store": "^2.0.12",
		"style-loader": "^0.21.0",
		"url": "^0.11.0",
		"url-loader": "^1.0.1",
		"vee-validate": "^2.0.9",
		"vue": "^2.5.16",
		"vue-i18n": "^8.0.0",
		"vue-loader": "^15.2.4",
		"vue-notifications": "^0.9.0",
		"vue-router": "^3.0.1",
		"vue-style-loader": "^4.1.0",
		"vue-template-compiler": "^2.5.16",
		"vue-toasted": "^1.1.24",
		"vuex": "^3.0.1",
		"webpack": "^4.14.0",
		"webpack-cli": "^3.0.8",
		"webpack-dev-server": "^3.1.4"
	},
	"devDependencies": {
		"@sailshq/eslint": "^4.19.3",
		"@sailshq/htmlhint": "^0.9.16",
		"@sailshq/lesshint": "^4.6.6",
		"grunt": "^1.0.3",
		"sails-hook-grunt": "^3.1.0"
	},
	"scripts": {
		"start": "NODE_ENV=production node app.js",
		"test": "npm run lint && npm run custom-tests && echo 'Done.'",
		"lint": "eslint . --max-warnings=0 --report-unused-disable-directives && echo '‚úî  Your .js files look so good.' && htmlhint -c ./.htmlhintrc views/*.ejs && htmlhint -c ./.htmlhintrc views/**/*.ejs && htmlhint -c ./.htmlhintrc views/**/**/*.ejs && htmlhint -c ./.htmlhintrc views/**/**/**/*.ejs && htmlhint -c ./.htmlhintrc views/**/**/**/**/*.ejs && htmlhint -c ./.htmlhintrc views/**/**/**/**/**/*.ejs && htmlhint -c ./.htmlhintrc views/**/**/**/**/**/**/*.ejs && echo '‚úî  So do your .ejs files.' && lesshint assets/styles/ --max-warnings=0 && echo '‚úî  Your .less files look good, too.'",
		"custom-tests": "echo \"(No other custom tests yet.)\" && echo",
		"deploy": "echo 'This script assumes a dead-simple, opinionated setup on Heroku.' && echo 'But, of course, you can deploy your app anywhere you like.' && echo '(Node.js/Sails.js apps are supported on all modern hosting platforms.)' && echo && echo 'Warning: Specifically, this script assumes you are on the master branch, and that your app can be deployed simply by force-pushing on top of the *deploy* branch.  It will also temporarily use a local *predeploy* branch for preparing assets, that it will delete after it finishes.  Please make sure there is nothing you care about on either of these two branches!!!' && echo '' && echo '' && echo 'Preparing to deploy...' && echo '--' && git status && echo '' && echo '--' && echo 'I hope you are on the master branch and have everything committed/pulled/pushed and are completely up to date and stuff.' && echo '********************************************'  && echo '** IF NOT THEN PLEASE PRESS <CTRL+C> NOW! **' && echo '********************************************' && echo 'Press CTRL+C to cancel.' && echo '(you have five seconds)' && sleep 1 && echo '...4' && sleep 1 && echo '...3' && sleep 1 && echo '...2' && sleep 1 && echo '...1' && sleep 1  && echo '' && echo 'Alright, here we go.  No turning back now!' && echo 'Trying to switch to master branch...' && git checkout master && echo && echo 'OK.  Now wiping node_modules/ and running npm install...' && rm -rf node_modules && rm -rf package-lock.json && npm install && (git add package-lock.json && git commit -am 'AUTOMATED COMMIT: Did fresh npm install before deploying, and it caused something relevant (probably the package-lock.json file) to change!  This commit tracks that change.' || true) && echo 'Deploying as version:' && npm version patch && echo '' && git push origin master && git push --tags && (git branch -D predeploy > /dev/null 2>&1 || true) && git checkout -b predeploy && (echo 'Now building+minifying assets for production...' && echo '(Hang tight, this could take a while.)' && echo && node node_modules/grunt/bin/grunt buildProd || (echo && echo '------------------------------------------' && echo 'IMPORTANT!  IMPORTANT!  IMPORTANT!' && echo 'ERROR: Could not compile assets for production!' && echo && echo 'Attempting to recover automatically by stashing, ' && echo 'switching back to the master branch, and then ' && echo 'deleting the predeploy branch... ' && echo && echo 'After this, please fix the issues logged above' && echo 'and push that up.  Then, try deploying again.' && echo '------------------------------------------' && echo && echo 'Staging, deleting the predeploy branch, and switching back to master...' && git stash && git checkout master && git branch -D predeploy && false)) && mv www .www && git add .www && node -e 'sailsrc = JSON.parse(require(\"fs\").readFileSync(\"./.sailsrc\", \"utf8\"));  if (sailsrc.paths&&sailsrc.paths.public !== undefined || sailsrc.hooks&&sailsrc.hooks.grunt !== undefined) { throw new Error(\"Cannot complete deployment script: .sailsrc file has conflicting contents!  Please throw away this midway-complete deployment, switch back to your original branch (master), remove the conflicting stuff from .sailsrc, then commit and push that up.\"); }  sailsrc.paths = sailsrc.paths || {};  sailsrc.paths.public = \"./.www\";   sailsrc.hooks = sailsrc.hooks || {};  sailsrc.hooks.grunt = false;  require(\"fs\").writeFileSync(\"./.sailsrc\", JSON.stringify(sailsrc))' && git commit -am 'AUTOMATED COMMIT: Automatically bundling compiled assets as part of deploy, updating the EJS layout and .sailsrc file accordingly.' && git push origin predeploy && git checkout master && git push origin +predeploy:deploy && git push --tags && git branch -D predeploy && git push origin :predeploy && echo '' && echo '--' && echo 'OK, done.  It should be live momentarily on your staging environment.' && echo '(if you get impatient, check the Heroku dashboard for status)' && echo && echo 'Staging environment:' && echo ' üåê‚Äì‚Ä¢  https://staging.example.com' && echo '       (hold ‚åò and click to open links in the terminal)' && echo && echo 'Please review that to make sure it looks good.' && echo 'When you are ready to go to production, visit your pipeline on Heroku and press the PROMOTE TO PRODUCTION button.'",
		"updateall": "npm-update-all",
		"dev": "webpack-dev-server --config ./assets/webpack/webpack.dev.js --mode development",
		"prod": "sails lift --prod",
		"build": "webpack-cli --config ./assets/webpack/webpack.prod.js --mode production",
		"format": "prettier --tab-width 4 --write \"assets/webpack/src/**/*.vue\" \"assets/webpack/src/**/*.js\""
	}
}
